/******************************************************************************
* This file was generated by ZenStack CLI.
******************************************************************************/

/* eslint-disable */
// @ts-nocheck

import type { AnyRouter } from '@trpc/server';
import type { CreateTRPCReactOptions } from '@trpc/react-query/shared';
import { type CreateTRPCReact, createTRPCReact as _createTRPCReact } from '@trpc/react-query';
import type { DeepOverrideAtPath } from './utils';
import { ClientType as UserClientType } from "./User.react.type";
import { ClientType as EventClientType } from "./Event.react.type";
import { ClientType as CommunityClientType } from "./Community.react.type";
import { ClientType as EventRegistrationClientType } from "./EventRegistration.react.type";
import { ClientType as CommunityMemberClientType } from "./CommunityMember.react.type";
import { ClientType as DiscussionClientType } from "./Discussion.react.type";
import { ClientType as NotificationClientType } from "./Notification.react.type";
import { ClientType as MentorshipClientType } from "./Mentorship.react.type";
import { ClientType as AchievementClientType } from "./Achievement.react.type";
import { ClientType as PwaSubscriptionClientType } from "./PwaSubscription.react.type";

export function createTRPCReact<
    TRouter extends AnyRouter,
    TPath extends string | undefined = undefined,
    TSSRContext = unknown,
    TFlags = null
>(opts?: CreateTRPCReactOptions<TRouter>) {
    const r: CreateTRPCReact<TRouter, TSSRContext, TFlags> = _createTRPCReact<TRouter, TSSRContext, TFlags>(opts);
    return r as DeepOverrideAtPath<CreateTRPCReact<TRouter, TSSRContext, TFlags>, ClientType<TRouter>, TPath>;
}

export interface ClientType<AppRouter extends AnyRouter> {
    user: UserClientType<AppRouter>;
    event: EventClientType<AppRouter>;
    community: CommunityClientType<AppRouter>;
    eventRegistration: EventRegistrationClientType<AppRouter>;
    communityMember: CommunityMemberClientType<AppRouter>;
    discussion: DiscussionClientType<AppRouter>;
    notification: NotificationClientType<AppRouter>;
    mentorship: MentorshipClientType<AppRouter>;
    achievement: AchievementClientType<AppRouter>;
    pwaSubscription: PwaSubscriptionClientType<AppRouter>;
}
